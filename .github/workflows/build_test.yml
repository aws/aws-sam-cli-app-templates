name: Build and Test Templates

on:
  pull_request:
    branches: ['master']
  
jobs:
  run-workflow:
    name: PR Workflow
    # if: github.repository_owner == 'aws'
    runs-on: ubuntu-latest
    needs:
      - build-test-python
      - build-test-java
      - build-test-nodejs
      - build-test-ruby
    steps:
      - name: report-failure
        if: |
          needs.build-test-python.result != 'success' ||
          needs.build-test-java.result != 'success' ||
          needs.build-test-nodejs.result != 'success' ||
          needs.build-test-ruby.result != 'success'
        run: exit 1
      - name: report-success
        run: exit 0

  ################
  # Python
  build-test-python:
    name: Python ${{ matrix.version }}
    # if: github.repository_owner == 'aws'
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '3.7'
            file: 'tests/integration/unit_test/test_unit_test_python3_7.py'
          - version: '3.8'
            file: 'tests/integration/unit_test/test_unit_test_python3_8.py'
          - version: '3.9'
            file: 'tests/integration/unit_test/test_unit_test_python3_9.py'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout PR
      - uses: ./.github/actions/aws-sam-cli-develop
        name: Install develop version of AWS SAM CLI
      - uses: actions/setup-python@v4
        name: Setup Python ${{ matrix.version }}
        with:
          python-version: ${{ matrix.version }}
      - name: Run build tests for ${{ matrix.file }}
        run: |
          pip install -r requirements.txt
          samdev --info
          SAM_CLI_DEV=1 pytest -vvv ${{ matrix.file }}

  ################
  # Java
  build-test-java:
    name: Java ${{ matrix.version }}
    # if: github.repository_owner == 'aws'
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '8'
            file: 'tests/integration/unit_test/test_unit_test_java8.py'
          - version: '11'
            file: 'tests/integration/unit_test/test_unit_test_java11.py'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout PR
      - uses: ./.github/actions/aws-sam-cli-develop
        name: Install develop version of AWS SAM CLI
      - uses: actions/setup-java@v3
        name: Setup Java ${{ matrix.version }}
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.version }}
      # - uses: actions/setup-python@v4
      #   name: Setup Python 3.7
      #   with:
      #     python-version: '3.7'
      - name: Run build tests for ${{ matrix.file }}
        run: |
          pip install -r requirements.txt
          samdev --info
          gradle --version
          mvn --version
          SAM_CLI_DEV=1 pytest -vvv ${{ matrix.file }}
          
  ################
  # NodeJS
  build-test-nodejs:
    name: NodeJS ${{ matrix.version }}
    # if: github.repository_owner == 'aws'
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '12'
            file: 'tests/integration/unit_test/test_unit_test_nodejs12_x.py'
          - version: '14'
            file: 'tests/integration/unit_test/test_unit_test_nodejs14_x.py'
          - version: '16'
            file: 'tests/integration/unit_test/test_unit_test_nodejs16_x.py'
          - version: '18'
            file: 'tests/integration/unit_test/test_unit_test_nodejs18_x.py'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout PR
      - uses: ./.github/actions/aws-sam-cli-develop
        name: Install develop version of AWS SAM CLI
      # - uses: actions/setup-python@v4
      #   name: Setup Python 3.7
      #   with:
      #     python-version: '3.7'
      - uses: actions/setup-node@v3
        name: Setup NodeJS ${{ matrix.version }}
        with:
          node-version: ${{ matrix.version }}
      - name: Run build tests for ${{ matrix.file }}
        run: |
          pip install -r requirements.txt
          samdev --info
          node --version
          SAM_CLI_DEV=1 pytest -vvv ${{ matrix.file }}
          
  ################
  # Ruby
  build-test-ruby:
    name: Ruby ${{ matrix.version }}
    # if: github.repository_owner == 'aws'
    strategy:
      fail-fast: false
      matrix:
        include:
          - version: '2.7'
            file: 'tests/integration/unit_test/test_unit_test_ruby2_7.py'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout PR
      - uses: ./.github/actions/aws-sam-cli-develop
        name: Install develop version of AWS SAM CLI
      # - uses: actions/setup-python@v4
      #   name: Setup Python 3.7
      #   with:
      #     python-version: '3.7'
      - uses: ruby/setup-ruby@v1
        name: Setup Ruby ${{ matrix.version }}
        with:
          ruby-version: ${{ matrix.version }}
      - name: Run build tests for ${{ matrix.file }}
        run: |
          pip install -r requirements.txt
          samdev --info
          ruby --version
          SAM_CLI_DEV=1 pytest -vvv ${{ matrix.file }}
          
  ################
  # Rust
  build-test-rust:
    name: Rust
    # if: github.repository_owner == 'aws'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout PR
      - uses: ./.github/actions/aws-sam-cli-develop
        name: Install develop version of AWS SAM CLI
      # - uses: actions/setup-python@v4
      #   name: Setup Python 3.7
      #   with:
      #     python-version: '3.7'
      - name: Setup Rust
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          source $HOME/.cargo/env
          rustup toolchain install stable --profile minimal --no-self-update 
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu --toolchain stable
          rustup target add aarch64-unknown-linux-gnu --toolchain stable
          pip install cargo-lambda==0.17.1
      - name: Run build tests for tests/integration/unit_test/test_unit_test_rust.py
        run: |
          pip install -r requirements.txt
          samdev --info
          rustc -V
          cargo -V
          cargo lambda -V
          SAM_CLI_DEV=1 pytest -vvv tests/integration/unit_test/test_unit_test_rust.py